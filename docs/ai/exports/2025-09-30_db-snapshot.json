[
  {
    "db_snapshot": {
      "tables": [
        {
          "table": "blog_owner",
          "column": "owner_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "id",
          "default": "gen_random_uuid()",
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "post_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "author_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "parent_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "YES"
        },
        {
          "table": "comments",
          "column": "body",
          "default": null,
          "data_type": "text",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "depth",
          "default": "0",
          "data_type": "integer",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "is_deleted",
          "default": "false",
          "data_type": "boolean",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "created_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "comments",
          "column": "updated_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "post_bookmarks",
          "column": "user_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "post_bookmarks",
          "column": "post_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "post_bookmarks",
          "column": "created_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "post_metrics",
          "column": "post_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "YES"
        },
        {
          "table": "post_metrics",
          "column": "likes",
          "default": null,
          "data_type": "bigint",
          "is_nullable": "YES"
        },
        {
          "table": "post_metrics",
          "column": "dislikes",
          "default": null,
          "data_type": "bigint",
          "is_nullable": "YES"
        },
        {
          "table": "post_metrics",
          "column": "bookmarks",
          "default": null,
          "data_type": "bigint",
          "is_nullable": "YES"
        },
        {
          "table": "post_metrics",
          "column": "comments",
          "default": null,
          "data_type": "bigint",
          "is_nullable": "YES"
        },
        {
          "table": "post_reactions",
          "column": "user_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "post_reactions",
          "column": "post_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "post_reactions",
          "column": "reaction",
          "default": null,
          "data_type": "smallint",
          "is_nullable": "NO"
        },
        {
          "table": "post_reactions",
          "column": "created_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "post_versions",
          "column": "id",
          "default": "nextval('post_versions_id_seq'::regclass)",
          "data_type": "bigint",
          "is_nullable": "NO"
        },
        {
          "table": "post_versions",
          "column": "post_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "post_versions",
          "column": "actor_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "YES"
        },
        {
          "table": "post_versions",
          "column": "title",
          "default": null,
          "data_type": "text",
          "is_nullable": "YES"
        },
        {
          "table": "post_versions",
          "column": "content_json",
          "default": null,
          "data_type": "jsonb",
          "is_nullable": "YES"
        },
        {
          "table": "post_versions",
          "column": "created_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "YES"
        },
        {
          "table": "posts",
          "column": "id",
          "default": "gen_random_uuid()",
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "author_id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "title",
          "default": null,
          "data_type": "text",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "slug",
          "default": null,
          "data_type": "text",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "content",
          "default": null,
          "data_type": "text",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "excerpt",
          "default": null,
          "data_type": "text",
          "is_nullable": "YES"
        },
        {
          "table": "posts",
          "column": "cover_image_url",
          "default": null,
          "data_type": "text",
          "is_nullable": "YES"
        },
        {
          "table": "posts",
          "column": "status",
          "default": "'draft'::text",
          "data_type": "text",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "published_at",
          "default": null,
          "data_type": "timestamp with time zone",
          "is_nullable": "YES"
        },
        {
          "table": "posts",
          "column": "is_deleted",
          "default": "false",
          "data_type": "boolean",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "created_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "updated_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "posts",
          "column": "content_json",
          "default": null,
          "data_type": "jsonb",
          "is_nullable": "YES"
        },
        {
          "table": "profiles",
          "column": "id",
          "default": null,
          "data_type": "uuid",
          "is_nullable": "NO"
        },
        {
          "table": "profiles",
          "column": "username",
          "default": null,
          "data_type": "USER-DEFINED",
          "is_nullable": "NO"
        },
        {
          "table": "profiles",
          "column": "display_name",
          "default": null,
          "data_type": "text",
          "is_nullable": "YES"
        },
        {
          "table": "profiles",
          "column": "avatar_url",
          "default": null,
          "data_type": "text",
          "is_nullable": "YES"
        },
        {
          "table": "profiles",
          "column": "bio",
          "default": null,
          "data_type": "text",
          "is_nullable": "YES"
        },
        {
          "table": "profiles",
          "column": "created_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        },
        {
          "table": "profiles",
          "column": "updated_at",
          "default": "now()",
          "data_type": "timestamp with time zone",
          "is_nullable": "NO"
        }
      ],
      "indexes": [
        {
          "index": "blog_owner_pkey",
          "table": "blog_owner",
          "definition": "CREATE UNIQUE INDEX blog_owner_pkey ON public.blog_owner USING btree (owner_id)"
        },
        {
          "index": "comments_parent_idx",
          "table": "comments",
          "definition": "CREATE INDEX comments_parent_idx ON public.comments USING btree (parent_id)"
        },
        {
          "index": "comments_pkey",
          "table": "comments",
          "definition": "CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id)"
        },
        {
          "index": "comments_post_idx",
          "table": "comments",
          "definition": "CREATE INDEX comments_post_idx ON public.comments USING btree (post_id, created_at)"
        },
        {
          "index": "post_bookmarks_pkey",
          "table": "post_bookmarks",
          "definition": "CREATE UNIQUE INDEX post_bookmarks_pkey ON public.post_bookmarks USING btree (user_id, post_id)"
        },
        {
          "index": "post_bookmarks_post_idx",
          "table": "post_bookmarks",
          "definition": "CREATE INDEX post_bookmarks_post_idx ON public.post_bookmarks USING btree (post_id)"
        },
        {
          "index": "post_reactions_pkey",
          "table": "post_reactions",
          "definition": "CREATE UNIQUE INDEX post_reactions_pkey ON public.post_reactions USING btree (user_id, post_id)"
        },
        {
          "index": "post_reactions_post_idx",
          "table": "post_reactions",
          "definition": "CREATE INDEX post_reactions_post_idx ON public.post_reactions USING btree (post_id)"
        },
        {
          "index": "post_versions_pkey",
          "table": "post_versions",
          "definition": "CREATE UNIQUE INDEX post_versions_pkey ON public.post_versions USING btree (id)"
        },
        {
          "index": "posts_author_idx",
          "table": "posts",
          "definition": "CREATE INDEX posts_author_idx ON public.posts USING btree (author_id)"
        },
        {
          "index": "posts_not_deleted_idx",
          "table": "posts",
          "definition": "CREATE INDEX posts_not_deleted_idx ON public.posts USING btree (is_deleted) WHERE (is_deleted = false)"
        },
        {
          "index": "posts_pkey",
          "table": "posts",
          "definition": "CREATE UNIQUE INDEX posts_pkey ON public.posts USING btree (id)"
        },
        {
          "index": "posts_pub_idx",
          "table": "posts",
          "definition": "CREATE INDEX posts_pub_idx ON public.posts USING btree (status, published_at DESC)"
        },
        {
          "index": "posts_slug_key",
          "table": "posts",
          "definition": "CREATE UNIQUE INDEX posts_slug_key ON public.posts USING btree (slug)"
        },
        {
          "index": "profiles_pkey",
          "table": "profiles",
          "definition": "CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id)"
        },
        {
          "index": "profiles_username_key",
          "table": "profiles",
          "definition": "CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username)"
        }
      ],
      "policies": [
        {
          "roles": [
            "public"
          ],
          "table": "comments",
          "using": "((author_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM (posts p\n     JOIN blog_owner o ON ((o.owner_id = p.author_id)))\n  WHERE ((p.id = comments.post_id) AND (o.owner_id = auth.uid())))))",
          "policy": "comments_delete_self_or_owner",
          "schema": "public",
          "command": "DELETE",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "comments",
          "using": null,
          "policy": "comments_insert_authenticated",
          "schema": "public",
          "command": "INSERT",
          "permissive": "PERMISSIVE",
          "with_check": "((auth.uid() IS NOT NULL) AND (EXISTS ( SELECT 1\n   FROM posts p\n  WHERE ((p.id = comments.post_id) AND (p.status = 'published'::text) AND (p.is_deleted = false)))) AND (author_id = auth.uid()))"
        },
        {
          "roles": [
            "public"
          ],
          "table": "comments",
          "using": "((EXISTS ( SELECT 1\n   FROM posts p\n  WHERE ((p.id = comments.post_id) AND (((p.status = 'published'::text) AND (p.is_deleted = false)) OR (EXISTS ( SELECT 1\n           FROM blog_owner o\n          WHERE (o.owner_id = auth.uid()))))))) OR (author_id = auth.uid()))",
          "policy": "comments_read_visible_or_owner_or_self",
          "schema": "public",
          "command": "SELECT",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "comments",
          "using": "((author_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM (posts p\n     JOIN blog_owner o ON ((o.owner_id = p.author_id)))\n  WHERE ((p.id = comments.post_id) AND (o.owner_id = auth.uid())))))",
          "policy": "comments_update_self_or_owner",
          "schema": "public",
          "command": "UPDATE",
          "permissive": "PERMISSIVE",
          "with_check": "true"
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_bookmarks",
          "using": "(user_id = auth.uid())",
          "policy": "bookmarks_delete_self",
          "schema": "public",
          "command": "DELETE",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_bookmarks",
          "using": null,
          "policy": "bookmarks_insert_self",
          "schema": "public",
          "command": "INSERT",
          "permissive": "PERMISSIVE",
          "with_check": "(user_id = auth.uid())"
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_bookmarks",
          "using": "(user_id = auth.uid())",
          "policy": "bookmarks_read_self",
          "schema": "public",
          "command": "SELECT",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_reactions",
          "using": "(user_id = auth.uid())",
          "policy": "reactions_delete_self",
          "schema": "public",
          "command": "DELETE",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_reactions",
          "using": "true",
          "policy": "reactions_read_all",
          "schema": "public",
          "command": "SELECT",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_reactions",
          "using": "(user_id = auth.uid())",
          "policy": "reactions_update_self",
          "schema": "public",
          "command": "UPDATE",
          "permissive": "PERMISSIVE",
          "with_check": "(user_id = auth.uid())"
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_reactions",
          "using": null,
          "policy": "reactions_upsert_self",
          "schema": "public",
          "command": "INSERT",
          "permissive": "PERMISSIVE",
          "with_check": "(user_id = auth.uid())"
        },
        {
          "roles": [
            "public"
          ],
          "table": "post_versions",
          "using": "(EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid())))",
          "policy": "owner_all_versions",
          "schema": "public",
          "command": "ALL",
          "permissive": "PERMISSIVE",
          "with_check": "(EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid())))"
        },
        {
          "roles": [
            "public"
          ],
          "table": "posts",
          "using": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))",
          "policy": "posts_delete_owner_only",
          "schema": "public",
          "command": "DELETE",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "posts",
          "using": null,
          "policy": "posts_insert_owner_only",
          "schema": "public",
          "command": "INSERT",
          "permissive": "PERMISSIVE",
          "with_check": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))"
        },
        {
          "roles": [
            "public"
          ],
          "table": "posts",
          "using": "(((status = 'published'::text) AND (is_deleted = false)) OR (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))",
          "policy": "posts_read_published_or_owner",
          "schema": "public",
          "command": "SELECT",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "posts",
          "using": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))",
          "policy": "posts_update_owner_only",
          "schema": "public",
          "command": "UPDATE",
          "permissive": "PERMISSIVE",
          "with_check": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))"
        },
        {
          "roles": [
            "public"
          ],
          "table": "profiles",
          "using": null,
          "policy": "profiles_insert_self",
          "schema": "public",
          "command": "INSERT",
          "permissive": "PERMISSIVE",
          "with_check": "(id = auth.uid())"
        },
        {
          "roles": [
            "public"
          ],
          "table": "profiles",
          "using": "true",
          "policy": "profiles_read_all",
          "schema": "public",
          "command": "SELECT",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "profiles",
          "using": "(id = auth.uid())",
          "policy": "profiles_update_self",
          "schema": "public",
          "command": "UPDATE",
          "permissive": "PERMISSIVE",
          "with_check": "(id = auth.uid())"
        },
        {
          "roles": [
            "public"
          ],
          "table": "objects",
          "using": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))",
          "policy": "owner delete post-images",
          "schema": "storage",
          "command": "DELETE",
          "permissive": "PERMISSIVE",
          "with_check": null
        },
        {
          "roles": [
            "public"
          ],
          "table": "objects",
          "using": null,
          "policy": "owner insert post-images",
          "schema": "storage",
          "command": "INSERT",
          "permissive": "PERMISSIVE",
          "with_check": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))"
        },
        {
          "roles": [
            "public"
          ],
          "table": "objects",
          "using": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))",
          "policy": "owner update post-images",
          "schema": "storage",
          "command": "UPDATE",
          "permissive": "PERMISSIVE",
          "with_check": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))"
        },
        {
          "roles": [
            "public"
          ],
          "table": "objects",
          "using": "(bucket_id = 'post-images'::text)",
          "policy": "public read post-images",
          "schema": "storage",
          "command": "SELECT",
          "permissive": "PERMISSIVE",
          "with_check": null
        }
      ],
      "rls_tables": [
        {
          "table": "blog_owner",
          "rls_enabled": false
        },
        {
          "table": "comments",
          "rls_enabled": true
        },
        {
          "table": "post_bookmarks",
          "rls_enabled": true
        },
        {
          "table": "post_reactions",
          "rls_enabled": true
        },
        {
          "table": "post_versions",
          "rls_enabled": true
        },
        {
          "table": "posts",
          "rls_enabled": true
        },
        {
          "table": "profiles",
          "rls_enabled": true
        }
      ],
      "foreign_keys": [
        {
          "table": "comments",
          "column": "author_id",
          "references_table": "profiles",
          "references_column": "id"
        },
        {
          "table": "comments",
          "column": "parent_id",
          "references_table": "comments",
          "references_column": "id"
        },
        {
          "table": "comments",
          "column": "post_id",
          "references_table": "posts",
          "references_column": "id"
        },
        {
          "table": "post_bookmarks",
          "column": "post_id",
          "references_table": "posts",
          "references_column": "id"
        },
        {
          "table": "post_bookmarks",
          "column": "user_id",
          "references_table": "profiles",
          "references_column": "id"
        },
        {
          "table": "post_reactions",
          "column": "post_id",
          "references_table": "posts",
          "references_column": "id"
        },
        {
          "table": "post_reactions",
          "column": "user_id",
          "references_table": "profiles",
          "references_column": "id"
        },
        {
          "table": "post_versions",
          "column": "actor_id",
          "references_table": "profiles",
          "references_column": "id"
        },
        {
          "table": "post_versions",
          "column": "post_id",
          "references_table": "posts",
          "references_column": "id"
        },
        {
          "table": "posts",
          "column": "author_id",
          "references_table": "profiles",
          "references_column": "id"
        }
      ],
      "generated_at": "2025-10-01T00:54:13.174924+00:00",
      "storage_buckets": [
        {
          "id": "post-images",
          "name": "post-images",
          "public": true,
          "file_size_limit": null,
          "allowed_mime_types": null
        }
      ]
    }
  }
]