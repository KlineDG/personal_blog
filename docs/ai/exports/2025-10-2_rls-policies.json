[
  {
    "schemaname": "public",
    "tablename": "comments",
    "policyname": "comments_delete_self_or_owner",
    "command": "DELETE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((author_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM (posts p\n     JOIN blog_owner o ON ((o.owner_id = p.author_id)))\n  WHERE ((p.id = comments.post_id) AND (o.owner_id = auth.uid())))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "comments",
    "policyname": "comments_insert_authenticated",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "((auth.uid() IS NOT NULL) AND (EXISTS ( SELECT 1\n   FROM posts p\n  WHERE ((p.id = comments.post_id) AND (p.status = 'published'::text) AND (p.is_deleted = false)))) AND (author_id = auth.uid()))"
  },
  {
    "schemaname": "public",
    "tablename": "comments",
    "policyname": "comments_read_visible_or_owner_or_self",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((EXISTS ( SELECT 1\n   FROM posts p\n  WHERE ((p.id = comments.post_id) AND (((p.status = 'published'::text) AND (p.is_deleted = false)) OR (EXISTS ( SELECT 1\n           FROM blog_owner o\n          WHERE (o.owner_id = auth.uid()))))))) OR (author_id = auth.uid()))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "comments",
    "policyname": "comments_update_self_or_owner",
    "command": "UPDATE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((author_id = auth.uid()) OR (EXISTS ( SELECT 1\n   FROM (posts p\n     JOIN blog_owner o ON ((o.owner_id = p.author_id)))\n  WHERE ((p.id = comments.post_id) AND (o.owner_id = auth.uid())))))",
    "with_check": "true"
  },
  {
    "schemaname": "public",
    "tablename": "folders",
    "policyname": "folders_delete_owner_only",
    "command": "DELETE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((owner_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "folders",
    "policyname": "folders_insert_owner_only",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "((owner_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))"
  },
  {
    "schemaname": "public",
    "tablename": "folders",
    "policyname": "folders_select_owner",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((owner_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "folders",
    "policyname": "folders_update_owner_only",
    "command": "UPDATE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((owner_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))",
    "with_check": "((owner_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))"
  },
  {
    "schemaname": "public",
    "tablename": "post_bookmarks",
    "policyname": "bookmarks_delete_self",
    "command": "DELETE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(user_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "post_bookmarks",
    "policyname": "bookmarks_insert_self",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "(user_id = auth.uid())"
  },
  {
    "schemaname": "public",
    "tablename": "post_bookmarks",
    "policyname": "bookmarks_read_self",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(user_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "post_reactions",
    "policyname": "reactions_delete_self",
    "command": "DELETE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(user_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "post_reactions",
    "policyname": "reactions_read_all",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "post_reactions",
    "policyname": "reactions_update_self",
    "command": "UPDATE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(user_id = auth.uid())",
    "with_check": "(user_id = auth.uid())"
  },
  {
    "schemaname": "public",
    "tablename": "post_reactions",
    "policyname": "reactions_upsert_self",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "(user_id = auth.uid())"
  },
  {
    "schemaname": "public",
    "tablename": "post_versions",
    "policyname": "owner_all_versions",
    "command": "ALL",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid())))",
    "with_check": "(EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid())))"
  },
  {
    "schemaname": "public",
    "tablename": "posts",
    "policyname": "posts_delete_owner_only",
    "command": "DELETE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "posts",
    "policyname": "posts_insert_owner_only",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))"
  },
  {
    "schemaname": "public",
    "tablename": "posts",
    "policyname": "posts_read_published_or_owner",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(((status = 'published'::text) AND (is_deleted = false)) OR (EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "posts",
    "policyname": "posts_update_owner_only",
    "command": "UPDATE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))",
    "with_check": "((EXISTS ( SELECT 1\n   FROM blog_owner o\n  WHERE (o.owner_id = auth.uid()))) AND (author_id = auth.uid()))"
  },
  {
    "schemaname": "public",
    "tablename": "profiles",
    "policyname": "profiles_insert_self",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "(id = auth.uid())"
  },
  {
    "schemaname": "public",
    "tablename": "profiles",
    "policyname": "profiles_read_all",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "profiles",
    "policyname": "profiles_update_self",
    "command": "UPDATE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(id = auth.uid())",
    "with_check": "(id = auth.uid())"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "owner delete post-images",
    "command": "DELETE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "owner insert post-images",
    "command": "INSERT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": null,
    "with_check": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "owner update post-images",
    "command": "UPDATE",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))",
    "with_check": "((bucket_id = 'post-images'::text) AND (auth.uid() IN ( SELECT blog_owner.owner_id\n   FROM blog_owner)))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "public read post-images",
    "command": "SELECT",
    "roles": "{public}",
    "permissive": "PERMISSIVE",
    "using_expression": "(bucket_id = 'post-images'::text)",
    "with_check": null
  }
]